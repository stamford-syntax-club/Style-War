// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	challenge "github.com/stamford-syntax-club/style-war/backend/app/challenge"
	mock "github.com/stretchr/testify/mock"
)

// ChallengeRepo is an autogenerated mock type for the ChallengeRepo type
type ChallengeRepo struct {
	mock.Mock
}

// GetActiveChallenge provides a mock function with given fields:
func (_m *ChallengeRepo) GetActiveChallenge() *challenge.Challenge {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveChallenge")
	}

	var r0 *challenge.Challenge
	if rf, ok := ret.Get(0).(func() *challenge.Challenge); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*challenge.Challenge)
		}
	}

	return r0
}

// GetAllChallenges provides a mock function with given fields: _a0
func (_m *ChallengeRepo) GetAllChallenges(_a0 ...string) ([]challenge.Challenge, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllChallenges")
	}

	var r0 []challenge.Challenge
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]challenge.Challenge, error)); ok {
		return rf(_a0...)
	}
	if rf, ok := ret.Get(0).(func(...string) []challenge.Challenge); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]challenge.Challenge)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChallengeRepo creates a new instance of ChallengeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChallengeRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChallengeRepo {
	mock := &ChallengeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
